#!/bin/bash
##
# Written by Kevin Hamer, mostly for his own use.

##EDGEWIDTH=6
EDGEWIDTH=0

getGeometry() {
	## Read in info about the active window
	eval $(xdotool getactivewindow getwindowgeometry --shell)
	## the above line populates the following variables
	# $WINDOW is the window ID.
	# $X is the X coordinate.
	# $Y is the Y coordinate.
	# $WIDTH is the width of the active window.
	# $HEIGHT is the height of the active window.
	# $SCREEN is an integer identifying the screen, but I don't use it.

	XCENTER=$(($X+$WIDTH/2))

	## HASH is used to tell whether the window has actually moved or not.
	HASH="$X-$Y-$WIDTH-$HEIGHT"
	echo "HASH = $HASH"

	xdotool getactivewindow getwindowgeometry --shell
}

getGeometry

		
detect() {
	## Find information about connected monitors from xrandr
	eval $(xrandr -q | awk '/ connected/{print $1"="$3}')
	MONITORS="$(xrandr -q | awk '/ connected/{print $1}' | xargs)"

	xrandr -q | awk '/ connected/{print $1"="$3}' > ~/.wmsnaprc
	echo "MONITORS=\"$MONITORS\"" >> ~/.wmsnaprc
}

loadMonitor() {
	GEOMETRY=$(eval "echo \$$MONITOR")
	GEOMETRY=(${GEOMETRY//[x+]/ })
	MINX=${GEOMETRY[2]}
	MAXX=$((${GEOMETRY[2]}+${GEOMETRY[0]}))
	MINY=${GEOMETRY[3]}
	MAXY=$((${GEOMETRY[3]}+${GEOMETRY[1]}))

	HALFX=$((($MAXX-$MINX)/2))
}

init() {
	source ~/.wmsnaprc
	## Find current monitor
	for MONITOR in $MONITORS; do
		echo "MONITOR = $MONITOR ..."
		loadMonitor
		if [ $XCENTER -ge $MINX ] && [ $XCENTER -le $MAXX ]; then
			break
		fi
	done
}

main() {
	case "$1" in
		maximize)
			wmctrl -r ":ACTIVE:" -b remove,maximized_vert
			wmctrl -r ":ACTIVE:" -b toggle,maximized_horz,maximized_vert
			;;
		left)
			init
			wmctrl -r ":ACTIVE:" -b remove,maximized_horz,maximized_vert
			xdotool getactivewindow windowmove $(($MINX)), 0
			xdotool getactivewindow windowsize $(($HALFX-$EDGEWIDTH)) y
			sleep .05s
			wmctrl -r ":ACTIVE:" -b add,maximized_vert

			OLDHASH="$HASH"
			getGeometry
			if [[ $HASH == $OLDHASH ]]; then
				LEFTMONITOR="${MONITORS/ $MONITOR*/}"
				if [[ $LEFTMONITOR != $MONITORS ]]; then
					LEFTMONITOR="${LEFTMONITOR/* /}"
					echo "move to left monitor"
					MONITOR=$LEFTMONITOR
					loadMonitor
					wmctrl -r ":ACTIVE:" -b remove,maximized_horz,maximized_vert
					xdotool getactivewindow windowmove $(($MINX+$HALFX)) 0
					xdotool getactivewindow windowsize $(($HALFX-$EDGEWIDTH)) y
					wmctrl -r ":ACTIVE:" -b add,maximized_vert
				fi
			fi
			;;
		right)
			init
			wmctrl -r ":ACTIVE:" -b remove,maximized_horz,maximized_vert
			xdotool getactivewindow windowmove $(($MINX+$HALFX)) 0
			xdotool getactivewindow windowsize $(($HALFX-$EDGEWIDTH)) y
			sleep .05s
			wmctrl -r ":ACTIVE:" -b add,maximized_vert

			OLDHASH="$HASH"
			getGeometry
			if [[ $HASH == $OLDHASH ]]; then
				RIGHTMONITOR="${MONITORS/*$MONITOR /}"
				if [[ $RIGHTMONITOR != $MONITORS ]]; then
					RIGHTMONITOR="${RIGHTMONITOR/ */}"
					echo "move to right monitor, $RIGHTMONITOR"
					MONITOR=$RIGHTMONITOR
					loadMonitor
					wmctrl -r ":ACTIVE:" -b remove,maximized_horz,maximized_vert
					xdotool getactivewindow windowmove $(($MINX)), 0
					xdotool getactivewindow windowsize $(($HALFX-$EDGEWIDTH)) y
					wmctrl -r ":ACTIVE:" -b add,maximized_vert
				fi
			fi
			;;
		detect)
			detect
			;;
		*)
			echo "wmsnap COMMAND"
			echo "    maximize  Toggles maximizing the current window."
			echo "    left      Maximize current window on the left half of the current"
			echo "              monitor, or move to a more left monitor."
			echo "    right     Maximize current window on the right half of the current"
			echo "              monitor, or move to a more right monitor."
			;;
	esac
}

main "$@"
